// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.Text
  title         String?
  skills        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts                Account[]
  sessions                Session[]
  verificationSubmissions VerificationSubmission[]
  badges                  Badge[]
  courseEnrollments       CourseEnrollment[]
  stores                  Store[]
  posts                   Post[]
  postLikes               PostLike[]

  // Freelance platform relations
  profile                  Profile?
  offers                   Offer[]
  projects                 Project[]           @relation("ClientProjects")
  proposals                Proposal[]          @relation("FreelancerProposals")
  contractsAsFreelancer    Contract[]          @relation("FreelancerContracts")
  contractsAsClient        Contract[]          @relation("ClientContracts")
  transactionsAsClient     EscrowTransaction[] @relation("ClientTransactions")
  transactionsAsFreelancer EscrowTransaction[] @relation("FreelancerTransactions")
  orders                   Order[]             @relation("ClientOrders")
  reviewsGiven             Review[]            @relation("Reviewer")
  reviewsReceived          Review[]            @relation("Reviewee")
  messagesSent             Message[]           @relation("Sender")
  messagesReceived         Message[]           @relation("Recipient")
  disputesFiled            Dispute[]           @relation("DisputeFiledBy")
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Company model
model Company {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  logo        String?
  website     String?
  industry    String?
  size        String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescriptions JobDescription[]
  badges          Badge[]
  courses         Course[]
}

// Job Description model
model JobDescription {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?  @db.Text
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company                 Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  requiredSkills          Skill[]
  requiredBehaviors       Behavior[]
  requiredCertifications  Certification[]
  documents               Document[]
  externalLinks           ExternalLink[]
  rules                   Rule[]
  verificationSubmissions VerificationSubmission[]
  badges                  Badge[]
  courseRelations         CourseToJD[]
}

// Skill model
model Skill {
  id          String   @id @default(cuid())
  jdId        String
  name        String
  level       String // beginner, intermediate, advanced, expert
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Behavior model
model Behavior {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String   @db.Text
  importance  String   @default("medium") // low, medium, high, critical
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Certification model
model Certification {
  id          String   @id @default(cuid())
  jdId        String
  name        String
  issuer      String?
  description String?  @db.Text
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Document model
model Document {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String?  @db.Text
  fileUrl     String
  fileType    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// External Link model
model ExternalLink {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  url         String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Rule model
model Rule {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String   @db.Text
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Verification Submission model
model VerificationSubmission {
  id          String    @id @default(cuid())
  userId      String
  jdId        String
  status      String // pending, approved, rejected
  submittedAt DateTime  @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?
  notes       String?   @db.Text

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
  proofs         Proof[]
}

// Proof model
model Proof {
  id                       String   @id @default(cuid())
  verificationSubmissionId String
  type                     String // skill, certification, behavior, other
  title                    String
  description              String?  @db.Text
  fileUrl                  String?
  linkUrl                  String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relations
  verificationSubmission VerificationSubmission @relation(fields: [verificationSubmissionId], references: [id], onDelete: Cascade)
}

// Badge model
model Badge {
  id          String    @id @default(cuid())
  userId      String
  companyId   String
  jdId        String
  name        String
  description String?   @db.Text
  imageUrl    String?
  issuedAt    DateTime  @default(now())
  expiresAt   DateTime?

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Course model
model Course {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?  @db.Text
  price       Float?
  isFree      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company         Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  modules         Module[]
  jobDescriptions CourseToJD[]
  enrollments     CourseEnrollment[]
}

// Module model
model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?  @db.Text
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

// Lesson model
model Lesson {
  id        String   @id @default(cuid())
  moduleId  String
  title     String
  content   String   @db.Text
  videoUrl  String?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

// Course to Job Description relation
model CourseToJD {
  courseId String
  jdId     String

  // Relations
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)

  @@id([courseId, jdId])
}

// Course Enrollment model
model CourseEnrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  progress    Float     @default(0) // 0-100%
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

// Store model
model Store {
  id         String   @id @default(cuid())
  userId     String
  name       String
  domain     String   @unique
  components Json?
  theme      Json?
  seo        Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Post model
model Post {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  likes     Int      @default(0)
  comments  Int      @default(0)

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  postLikes PostLike[]
}

// Post Like model
model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

// ================================
// Freelance Platform Models
// ================================

// Profile model for additional user details
model Profile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  bio                String?  @db.Text
  location           String?
  timezone           String?
  hourlyRateCents    Int?
  currency           String   @default("USD")
  portfolioUrl       String?
  website            String?
  vettingTier        String   @default("open") // 'open', 'verified', 'expert'
  verificationStatus String   @default("pending") // 'pending', 'approved', 'rejected'
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Categories for services/offers
model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  parentId    String?
  createdAt   DateTime @default(now())

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  offers   Offer[]
  projects Project[]
}

// Offer model
model Offer {
  id               String   @id @default(cuid())
  freelancerId     String
  title            String
  description      String?  @db.Text
  categoryId       String?
  deliveryTimeDays Int
  revisionLimit    Int      @default(1)
  priceCents       Int
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  freelancer User         @relation(fields: [freelancerId], references: [id])
  category   Category?    @relation(fields: [categoryId], references: [id])
  tiers      OfferTier[]
  addons     OfferAddon[]
  orders     Order[]
}

// Offer tiers (Basic, Standard, Premium)
model OfferTier {
  id               String   @id @default(cuid())
  offerId          String
  name             String // 'Basic', 'Standard', 'Premium'
  description      String?  @db.Text
  deliveryTimeDays Int
  revisionLimit    Int      @default(1)
  priceCents       Int
  features         String[]

  // Relations
  offer  Offer   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  orders Order[] @relation("OfferTierToOrder")
}

// Offer add-ons
model OfferAddon {
  id               String  @id @default(cuid())
  offerId          String
  title            String
  description      String? @db.Text
  priceCents       Int
  deliveryTimeDays Int     @default(0)

  // Relations
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
}

// Project model
model Project {
  id                String   @id @default(cuid())
  clientId          String
  title             String
  description       String?  @db.Text
  categoryId        String?
  budgetMinCents    Int?
  budgetMaxCents    Int?
  estimatedDuration String? // 'days', 'weeks', 'months'
  isRemote          Boolean  @default(true)
  location          String?
  status            String   @default("open") // 'open', 'in_progress', 'completed', 'cancelled'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  client    User       @relation("ClientProjects", fields: [clientId], references: [id])
  category  Category?  @relation(fields: [categoryId], references: [id])
  proposals Proposal[]
  contracts Contract[]
}

// Project proposals
model Proposal {
  id                  String   @id @default(cuid())
  projectId           String
  freelancerId        String
  coverLetter         String?  @db.Text
  estimatedPriceCents Int?
  estimatedDuration   String? // 'days', 'weeks', 'months'
  status              String   @default("submitted") // 'submitted', 'accepted', 'rejected'
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer User    @relation("FreelancerProposals", fields: [freelancerId], references: [id])
}

// Contract model
model Contract {
  id           String    @id @default(cuid())
  projectId    String
  freelancerId String
  clientId     String
  title        String
  description  String?   @db.Text
  startDate    DateTime?
  endDate      DateTime?
  status       String    @default("active") // 'active', 'completed', 'terminated'
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  project            Project             @relation(fields: [projectId], references: [id])
  freelancer         User                @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  client             User                @relation("ClientContracts", fields: [clientId], references: [id])
  milestones         Milestone[]
  escrowTransactions EscrowTransaction[]
  reviews            Review[]
  messages           Message[]
  disputes           Dispute[]
}

// Milestone model
model Milestone {
  id          String    @id @default(cuid())
  contractId  String
  title       String
  description String?   @db.Text
  amountCents Int
  dueDate     DateTime?
  status      String    @default("pending") // 'pending', 'in_progress', 'review', 'approved', 'rejected'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  contract          Contract           @relation(fields: [contractId], references: [id], onDelete: Cascade)
  escrowTransaction EscrowTransaction?
}

// EscrowTransaction model
model EscrowTransaction {
  id           String    @id @default(cuid())
  clientId     String
  freelancerId String
  amountCents  Int
  currency     String    @default("USD")
  status       String    @default("pending") // 'pending', 'held', 'released', 'refunded'
  contractId   String?
  milestoneId  String?   @unique
  createdAt    DateTime  @default(now())
  releasedAt   DateTime?

  // Relations
  client     User       @relation("ClientTransactions", fields: [clientId], references: [id])
  freelancer User       @relation("FreelancerTransactions", fields: [freelancerId], references: [id])
  contract   Contract?  @relation(fields: [contractId], references: [id])
  milestone  Milestone? @relation(fields: [milestoneId], references: [id])
}

// Order model
model Order {
  id              String   @id @default(cuid())
  offerId         String
  clientId        String
  tierId          String?
  addonIds        String[]
  status          String   @default("pending") // 'pending', 'in_progress', 'completed', 'cancelled'
  totalPriceCents Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  offer  Offer      @relation(fields: [offerId], references: [id])
  client User       @relation("ClientOrders", fields: [clientId], references: [id])
  tier   OfferTier? @relation("OfferTierToOrder", fields: [tierId], references: [id])
}

// Review model
model Review {
  id         String   @id @default(cuid())
  reviewerId String
  revieweeId String
  contractId String?
  rating     Int // 1-5
  comment    String?  @db.Text
  isVerified Boolean  @default(false) // Only verified if from completed contract
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  reviewer User      @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee User      @relation("Reviewee", fields: [revieweeId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])
}

// Message model
model Message {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  contractId  String?
  content     String   @db.Text
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  sender    User      @relation("Sender", fields: [senderId], references: [id])
  recipient User      @relation("Recipient", fields: [recipientId], references: [id])
  contract  Contract? @relation(fields: [contractId], references: [id])
}

// Dispute model
model Dispute {
  id          String    @id @default(cuid())
  contractId  String
  filedById   String
  subject     String
  description String    @db.Text
  status      String    @default("open") // 'open', 'in_review', 'resolved'
  resolution  String?   @db.Text
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?

  // Relations
  contract Contract @relation(fields: [contractId], references: [id])
  filedBy  User     @relation("DisputeFiledBy", fields: [filedById], references: [id])
}
