// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// Autilance Enums
// ================================

enum UserRole {
  BUYER
  SELLER
  ADMIN
  SUPPORT
  MODERATOR
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EscrowStatus {
  PENDING
  HELD
  RELEASED
  REFUNDED
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?  @db.Text
  title         String?
  skills        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts              Account[]
  sessions              Session[]
  verificationSubmissions VerificationSubmission[]
  badges                Badge[]
  courseEnrollments     CourseEnrollment[]
  stores                Store[]
  posts                 Post[]
  postLikes             PostLike[]
  
  // Freelance platform relations
  profile       Profile?
  offers        Offer[]
  projects      Project[]      @relation("ClientProjects")
  proposals     Proposal[]     @relation("FreelancerProposals")
  contractsAsFreelancer Contract[] @relation("FreelancerContracts")
  contractsAsClient     Contract[] @relation("ClientContracts")
  transactionsAsClient  EscrowTransaction[] @relation("ClientTransactions")
  transactionsAsFreelancer EscrowTransaction[] @relation("FreelancerTransactions")
  transactionsFrom Transaction[] @relation("TransactionFrom")
  transactionsTo   Transaction[] @relation("TransactionTo")
  orders        Order[]        @relation("ClientOrders")
  reviewsGiven  Review[]       @relation("Reviewer")
  reviewsReceived Review[]     @relation("Reviewee")
  messagesSent  Message[]      @relation("Sender")
  messagesReceived Message[]   @relation("Recipient")
  disputesFiled Dispute[]      @relation("DisputeFiledBy")
  auditLogs     AuditLog[]

  // Community relations
  topicsCreated    Topic[]          @relation("TopicAuthor")
  topicReplies     TopicReply[]     @relation("TopicReplyAuthor")
  topicLikes       TopicLike[]      @relation("TopicLikes")
  topicReplyLikes  TopicReplyLike[] @relation("TopicReplyLikes")
  eventsOrganized  CommunityEvent[] @relation("EventOrganizer")
  eventAttendances EventAttendee[]  @relation("EventAttendees")

  // ================================
  // Autilance Enhancements
  // ================================

  // Role-based permissions (BUYER, SELLER, ADMIN, SUPPORT)
  role           UserRole              @default(BUYER)

  // Gamification System
  xp             Int                   @default(0)
  level          Int                   @default(1)
  credibilityScore Int                 @default(0)
  lastActivityAt DateTime?

  // AI Preferences & Trust Score
  aiMatchingEnabled Boolean            @default(true)
  aiAssistantTier   String             @default("basic") // 'basic', 'pro', 'enterprise'
  trustScore       Float               @default(0.5) // 0-1 scale
  scamReports      Int                 @default(0)
  verifiedTrades   Int                 @default(0)

  // Enhanced Relations
  reputationEvents ReputationEvent[]
  fraudAlerts      FraudAlert[]
  aiAnalyses       AIAnalysis[]
  disputeResolutions DisputeResolution[]

  // Freelance system additions
  kycStatus       KycStatus     @default(PENDING)
  verifiedBadges  String[]      @default([])
  walletBalance   Int           @default(0) // in cents
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Company model
model Company {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  logo        String?
  website     String?
  industry    String?
  size        String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescriptions JobDescription[]
  badges          Badge[]
  courses         Course[]
}

// Job Description model
model JobDescription {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?  @db.Text
  isPublic    Boolean  @default(true)

  // Job Type & Classification
  jobType     String   @default("full-time") // 'full-time', 'freelance', 'contract', 'part-time'
  contractType String? // 'fixed-price', 'hourly', 'retainer'
  category    String?  // 'engineering', 'design', 'marketing', etc.
  industry    String?  // 'saas', 'ecommerce', 'fintech', etc.

  // Location & Remote
  isRemote    Boolean  @default(true)
  location    String?
  latitude    Float?
  longitude   Float?
  timezone    String?

  // Budget & Compensation
  budgetType  String?  // 'fixed', 'hourly'
  budgetMinCents Int?
  budgetMaxCents Int?
  hourlyRateMin  Int?
  hourlyRateMax  Int?
  currency    String   @default("USD")

  // Client Quality Metrics
  clientVerified Boolean @default(false)
  clientSpend    String? // '0-1k', '1-5k', '5-50k', '50k+'
  clientHireRate Int?    // Percentage 0-100
  clientRating   Float?  // 0-5 stars

  // Risk Flags
  riskFlags   String[] // ['unpaid-test', 'scope-creep', 'extreme-nda', etc.]

  // Project Details
  projectType String?  // 'new-build', 'maintenance', 'research', 'consulting'
  estimatedDuration String? // 'days', 'weeks', 'months'
  deadline    DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company                Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  requiredSkills         Skill[]
  requiredBehaviors      Behavior[]
  requiredCertifications Certification[]
  documents              Document[]
  externalLinks          ExternalLink[]
  rules                  Rule[]
  verificationSubmissions VerificationSubmission[]
  badges                 Badge[]
  courseRelations        CourseToJD[]
}

// Skill model
model Skill {
  id          String   @id @default(cuid())
  jdId        String
  name        String
  level       String   // beginner, intermediate, advanced, expert
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Behavior model
model Behavior {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String   @db.Text
  importance  String   @default("medium") // low, medium, high, critical
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Certification model
model Certification {
  id          String   @id @default(cuid())
  jdId        String
  name        String
  issuer      String?
  description String?  @db.Text
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Document model
model Document {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String?  @db.Text
  fileUrl     String
  fileType    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// External Link model
model ExternalLink {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  url         String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Rule model
model Rule {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String   @db.Text
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Verification Submission model
model VerificationSubmission {
  id          String   @id @default(cuid())
  userId      String
  jdId        String
  status      String   // pending, approved, rejected
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?
  notes       String?  @db.Text
  
  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
  proofs         Proof[]
}

// Proof model
model Proof {
  id                     String   @id @default(cuid())
  verificationSubmissionId String
  type                   String   // skill, certification, behavior, other
  title                  String
  description            String?  @db.Text
  fileUrl                String?
  linkUrl                String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  verificationSubmission VerificationSubmission @relation(fields: [verificationSubmissionId], references: [id], onDelete: Cascade)
}

// Badge model
model Badge {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  jdId        String
  name        String
  description String?  @db.Text
  imageUrl    String?
  issuedAt    DateTime @default(now())
  expiresAt   DateTime?

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Course model
model Course {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?  @db.Text
  price       Float?
  isFree      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company          Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  modules          Module[]
  jobDescriptions  CourseToJD[]
  enrollments      CourseEnrollment[]
}

// Module model
model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?  @db.Text
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

// Lesson model
model Lesson {
  id          String   @id @default(cuid())
  moduleId    String
  title       String
  content     String   @db.Text
  videoUrl    String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

// Course to Job Description relation
model CourseToJD {
  courseId String
  jdId     String

  // Relations
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)

  @@id([courseId, jdId])
}

// Course Enrollment model
model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Float    @default(0) // 0-100%
  startedAt DateTime @default(now())
  completedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

// Store model
model Store {
  id        String   @id @default(cuid())
  userId    String
  name      String
  domain    String   @unique
  components Json?
  theme     Json?
  seo       Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
}

// Post model
model Post {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  likes     Int      @default(0)
  comments  Int      @default(0)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postLikes PostLike[]
}

// Post Like model
model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

// ================================
// Freelance Platform Models
// ================================

// Profile model for additional user details
model Profile {
  id                String     @id @default(cuid())
  userId            String     @unique
  bio               String?    @db.Text
  location          String?
  timezone          String?
  hourlyRateCents   Int?
  currency          String     @default("USD")
  portfolioUrl      String?
  website           String?
  vettingTier       String     @default("open") // 'open', 'verified', 'expert'
  verificationStatus String    @default("pending") // 'pending', 'approved', 'rejected'
  portfolioLinks    String[]   @default([])
  ratingMetrics     Json?      // e.g., { averageRating: 4.5, totalReviews: 10 }
  disputeRate       Float      @default(0.0) // percentage of disputes
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Categories for services/offers
model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  description String? @db.Text
  parentId  String?
  createdAt DateTime  @default(now())

  // Relations
  parent    Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  offers    Offer[]
  projects  Project[]
}

// Offer model
model Offer {
  id              String     @id @default(cuid())
  freelancerId    String
  title           String
  description     String?    @db.Text
  categoryId      String?
  deliveryTimeDays Int
  revisionLimit   Int        @default(1)
  priceCents      Int
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  freelancer User     @relation(fields: [freelancerId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  tiers      OfferTier[]
  addons     OfferAddon[]
  orders     Order[]
}

// Offer tiers (Basic, Standard, Premium)
model OfferTier {
  id              String   @id @default(cuid())
  offerId         String
  name            String   // 'Basic', 'Standard', 'Premium'
  description     String?  @db.Text
  deliveryTimeDays Int
  revisionLimit   Int      @default(1)
  priceCents      Int
  features        String[]

  // Relations
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  orders Order[] @relation("OfferTierToOrder")
}

// Offer add-ons
model OfferAddon {
  id              String   @id @default(cuid())
  offerId         String
  title           String
  description     String?  @db.Text
  priceCents      Int
  deliveryTimeDays Int     @default(0)

  // Relations
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
}

// Project model
model Project {
  id                String    @id @default(cuid())
  clientId          String
  title             String
  description       String?   @db.Text
  categoryId        String?
  budgetMinCents    Int?
  budgetMaxCents    Int?
  estimatedDuration String?   // 'days', 'weeks', 'months'
  isRemote          Boolean   @default(true)
  location          String?
  status            String    @default("open") // 'open', 'in_progress', 'completed', 'cancelled'
  type              String    @default("fixed") // 'fixed', 'milestone', 'results'
  kpiSpec           String?
  evaluationWindowDays Int     @default(7)
  escrowStatus      EscrowStatus @default(PENDING)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  client    User     @relation("ClientProjects", fields: [clientId], references: [id])
  category  Category? @relation(fields: [categoryId], references: [id])
  proposals Proposal[]
  contracts Contract[]
  aiBriefs  JobBrief[] // AI-generated job briefs
}

// Project proposals
model Proposal {
  id                  String    @id @default(cuid())
  projectId           String
  freelancerId        String
  coverLetter         String?   @db.Text
  estimatedPriceCents Int?
  estimatedDuration   String?   // 'days', 'weeks', 'months'
  status              String    @default("submitted") // 'submitted', 'accepted', 'rejected'
  price               Int?      // in cents
  terms               String?   @db.Text
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer User    @relation("FreelancerProposals", fields: [freelancerId], references: [id])
}

// Contract model
model Contract {
  id          String    @id @default(cuid())
  projectId   String
  freelancerId String
  clientId    String
  title       String
  description String?   @db.Text
  startDate   DateTime?
  endDate     DateTime?
  status      String    @default("active") // 'active', 'completed', 'terminated'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project    Project @relation(fields: [projectId], references: [id])
  freelancer User    @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  client     User    @relation("ClientContracts", fields: [clientId], references: [id])
  milestones Milestone[]
  escrowTransactions EscrowTransaction[]
  reviews    Review[]
  messages   Message[]
  disputes   Dispute[]
  aiAssistant ProjectAssistant? // AI project assistance
}

// Milestone model
model Milestone {
  id          String    @id @default(cuid())
  contractId  String
  title       String
  description String?   @db.Text
  amountCents Int
  dueDate     DateTime?
  status      String    @default("pending") // 'pending', 'in_progress', 'review', 'approved', 'rejected'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  escrowTransaction EscrowTransaction?
  deliveries Delivery[]
}

// Delivery model
model Delivery {
  id          String    @id @default(cuid())
  milestoneId String
  fileUrl     String?
  fileHash    String?   // SHA256 hash
  deliveredAt DateTime  @default(now())
  notified    Boolean   @default(false)

   // Relations
   milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

   @@index([milestoneId])
}

// EscrowTransaction model
model EscrowTransaction {
  id                  String    @id @default(cuid())
  clientId            String
  freelancerId        String
  amountCents         Int
  currency            String    @default("USD")
  status              String    @default("pending") // 'pending', 'held', 'released', 'refunded'
  contractId          String?
  milestoneId         String?    @unique
  stripePaymentIntentId String?  // Stripe payment intent ID for escrow
  stripeClientSecret String?   // Stripe client secret for frontend
  createdAt           DateTime  @default(now())
  releasedAt          DateTime?

  // Relations
  client     User     @relation("ClientTransactions", fields: [clientId], references: [id])
  freelancer User     @relation("FreelancerTransactions", fields: [freelancerId], references: [id])
  contract   Contract? @relation(fields: [contractId], references: [id])
  milestone  Milestone? @relation(fields: [milestoneId], references: [id])
  commissionLog CommissionLog? // Autilance 5% commission
}

// Order model
model Order {
  id          String    @id @default(cuid())
  offerId     String
  clientId    String
  tierId      String?
  addonIds    String[]  
  status      String    @default("pending") // 'pending', 'in_progress', 'completed', 'cancelled'
  totalPriceCents Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  offer  Offer @relation(fields: [offerId], references: [id])
  client User  @relation("ClientOrders", fields: [clientId], references: [id])
  tier   OfferTier? @relation("OfferTierToOrder", fields: [tierId], references: [id])
}

// Review model
model Review {
  id         String    @id @default(cuid())
  reviewerId String
  revieweeId String
  contractId String?
  rating     Int       // 1-5
  comment    String?   @db.Text
  isVerified Boolean   @default(false) // Only verified if from completed contract
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // ================================
  // Autilance Enhancements
  // ================================
  visible              Boolean    @default(false)
  aiGenerated          Boolean    @default(false)
  verifiedDelivery     Boolean    @default(false)
  deliverySpeed        Int?       // 1-5 scale
  communicationQuality Int?       // 1-5 scale
  technicalSkill       Int?       // 1-5 scale
  paymentTimeliness    Boolean    @default(true)

  // Relations
  reviewer User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee User     @relation("Reviewee", fields: [revieweeId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])
}

// Message model
model Message {
  id         String    @id @default(cuid())
  senderId   String
  recipientId String
  contractId String?
  content    String    @db.Text
  attachments String[] @default([])
  signed     Boolean   @default(false)
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())

  // Relations
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  recipient User     @relation("Recipient", fields: [recipientId], references: [id])
  contract  Contract? @relation(fields: [contractId], references: [id])
}

// Dispute model
model Dispute {
  id          String    @id @default(cuid())
  contractId  String
  filedById   String
  subject     String
  description String    @db.Text
  evidence    String[]  @default([])
  aiSummary   String?   @db.Text
  status      String    @default("open") // 'open', 'in_review', 'resolved'
  resolution  String?   @db.Text
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?

  // ================================
  // Autilance AI Resolution
  // ================================
  confidence      Float?     // AI confidence score
  evidenceUrls    String[]   @default([]) // Links to chat logs, files, etc.
  aiAnalysis      Json?      // AI reasoning and recommendations
  // Relations
  contract Contract @relation(fields: [contractId], references: [id])
  filedBy  User     @relation("DisputeFiledBy", fields: [filedById], references: [id])
  resolutions DisputeResolution[]
}

// ================================
// Community Hub Models
// ================================

// Forum Category model
model ForumCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  icon        String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  topics Topic[]
}

// Forum Topic model
model Topic {
  id          String   @id @default(cuid())
  categoryId  String
  authorId    String
  title       String
  content     String   @db.Text
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author   User          @relation("TopicAuthor", fields: [authorId], references: [id])
  replies  TopicReply[]
  likes    TopicLike[]
}

// Forum Topic Reply model
model TopicReply {
  id        String   @id @default(cuid())
  topicId   String
  authorId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  topic  Topic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  author User            @relation("TopicReplyAuthor", fields: [authorId], references: [id])
  likes  TopicReplyLike[]
}

// Topic Like model
model TopicLike {
  id        String   @id @default(cuid())
  topicId   String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user  User  @relation("TopicLikes", fields: [userId], references: [id])

  @@unique([topicId, userId])
}

// Topic Reply Like model
model TopicReplyLike {
  id        String   @id @default(cuid())
  replyId   String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  reply TopicReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user  User       @relation("TopicReplyLikes", fields: [userId], references: [id])

  @@unique([replyId, userId])
}

// Community Event model
model CommunityEvent {
  id          String    @id @default(cuid())
  organizerId String
  title       String
  description String    @db.Text
  eventType   String    // 'webinar', 'workshop', 'meetup', 'networking'
  startTime   DateTime
  endTime     DateTime
  timezone    String
  isVirtual   Boolean   @default(true)
  location    String?
  meetingLink String?
  maxAttendees Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organizer  User                @relation("EventOrganizer", fields: [organizerId], references: [id])
  attendees  EventAttendee[]
}

// Event Attendee model
model EventAttendee {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    String   @default("registered") // 'registered', 'attended', 'cancelled'
  joinedAt  DateTime @default(now())

  // Relations
  event CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User           @relation("EventAttendees", fields: [userId], references: [id])

  @@unique([eventId, userId])
}

// Product model for stores
model Product {
  id          String   @id @default(cuid())
  storeId     String
  name        String
  description String?  @db.Text
  price       Float
  stock       Int      @default(0)
  status      String   @default("DRAFT") // DRAFT, ACTIVE, ARCHIVED
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

// ================================
// Autilance Enhancement Models
// ================================

// Reputation & Gamification System
model ReputationEvent {
  id          String   @id @default(cuid())
  userId      String
  eventType   String   // 'project_completed', 'review_received', 'verification_passed'
  xpGained    Int
  description String
  metadata    Json?    // Additional context
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
}

// AI Analysis system
model AIAnalysis {
  id          String   @id @default(cuid())
  userId      String
  analysisType String  // 'skill_matching', 'client_fit', 'fraud_detection', 'conflict_resolution'
  modelUsed   String   // 'claude-3.5-sonnet', 'embedding-ada', 'bert-classifier'
  confidence  Float
  metadata    Json     // Analysis results, reasoning
  costCents   Int      // API usage cost
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([analysisType])
}

// Conflict Resolution with AI
model DisputeResolution {
  id           String    @id @default(cuid())
  disputeId    String
  userId       String
  resolutionType String  // 'ai_suggestion', 'moderator_override', 'user_accepted'
  confidence   Float
  rationale    String    @db.Text
  evidence     Json      // Chat analysis, file timestamps, etc.
  acceptedAt   DateTime?

  dispute Dispute @relation(fields: [disputeId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([disputeId, userId])
}

// AI-powered job briefs
model JobBrief {
  id                String           @id @default(cuid())
  projectId         String
  generatedByAI     Boolean          @default(true)
  clarityScore      Float            // 0-1 scale
  industryAlignment Float
  titleOptimization Json             // AI suggestions for improvement
  contentAnalysis   Json             // Skill requirements, complexity
  riskFlags         String[]         // AI-detected risks
  createdAt         DateTime         @default(now())

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

// Fraud Detection & Trust
model FraudAlert {
  id              String           @id @default(cuid())
  userId          String
  alertType       String           // 'suspicious_pattern', 'unusual_activity', 'phishing_attempt'
  severity        String           @default("medium") // 'low', 'medium', 'high', 'critical'
  confidence      Float
  details         Json             // Evidence, patterns detected
  resolved        Boolean          @default(false)
  resolvedAt      DateTime?
  actionTaken     String?
  createdAt       DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([alertType])
  @@index([severity])
}

// AI Project Assistant
model ProjectAssistant {
  id                  String   @id @default(cuid())
  contractId          String   @unique
  assistantTier       String   @default("basic") // 'basic', 'pro'
  promptCount         Int      @default(0)
  priceSuggestions    Int      @default(0)
  milestoneDrafting   Int      @default(0)
  riskAssessments     Int      @default(0)
  totalCost           Int      @default(0) // API costs in cents
  createdAt           DateTime @default(now())

  contract Contract @relation(fields: [contractId], references: [id])

  @@index([contractId])
}

// Commission Tracking (5% rate)
model CommissionLog {
  id                  String   @id @default(cuid())
  transactionId       String   @unique
  transaction         EscrowTransaction @relation(fields: [transactionId], references: [id])
  grossAmount         Int      // Amount before commission (cents)
  commissionRate      Float    @default(0.05) // 5% = 0.05
  commissionAmount    Int      // Amount taken (cents)
  netAmount           Int      // Amount to freelancer (cents)
  processingFee       Int      // Stripe/other fees (cents)
  levelDiscount       Float    @default(0) // XP level discount (e.g., 0.01 = 1% off)
  finalCommission     Int      // After discount (cents)
  createdAt           DateTime @default(now())

  @@index([transactionId])
}

// AuditLog model
model AuditLog {
  id        String    @id @default(cuid())
  action    String    // 'user_login', 'job_created', 'milestone_delivered', etc.
  actorId   String?
  payload   Json?     // additional data
  timestamp DateTime  @default(now())

  // Relations
  actor User? @relation(fields: [actorId], references: [id])
}

// Transaction model for general transactions
model Transaction {
  id        String    @id @default(cuid())
  type      String    // 'escrow_hold', 'escrow_release', 'commission', 'payout'
  amount    Int       // in cents
  fromId    String?
  toId      String?
  status    String    @default("pending") // 'pending', 'completed', 'failed'
  metadata  Json?
  createdAt DateTime  @default(now())

  // Relations
  from User? @relation("TransactionFrom", fields: [fromId], references: [id])
  to   User? @relation("TransactionTo", fields: [toId], references: [id])
}
