// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?  @db.Text
  title         String?
  skills        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts              Account[]
  sessions              Session[]
  verificationSubmissions VerificationSubmission[]
  badges                Badge[]
  courseEnrollments     CourseEnrollment[]
  stores                Store[]
  posts                 Post[]
  postLikes             PostLike[]
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Company model
model Company {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  logo        String?
  website     String?
  industry    String?
  size        String?
  location    String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescriptions JobDescription[]
  badges          Badge[]
  courses         Course[]
}

// Job Description model
model JobDescription {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?  @db.Text
  isPublic    Boolean  @default(true)
  location    String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company                Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  requiredSkills         Skill[]
  requiredBehaviors      Behavior[]
  requiredCertifications Certification[]
  documents              Document[]
  externalLinks          ExternalLink[]
  rules                  Rule[]
  verificationSubmissions VerificationSubmission[]
  badges                 Badge[]
  courseRelations        CourseToJD[]
}

// Skill model
model Skill {
  id          String   @id @default(cuid())
  jdId        String
  name        String
  level       String   // beginner, intermediate, advanced, expert
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Behavior model
model Behavior {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String   @db.Text
  importance  String   @default("medium") // low, medium, high, critical
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Certification model
model Certification {
  id          String   @id @default(cuid())
  jdId        String
  name        String
  issuer      String?
  description String?  @db.Text
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Document model
model Document {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String?  @db.Text
  fileUrl     String
  fileType    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// External Link model
model ExternalLink {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  url         String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Rule model
model Rule {
  id          String   @id @default(cuid())
  jdId        String
  title       String
  description String   @db.Text
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Verification Submission model
model VerificationSubmission {
  id          String   @id @default(cuid())
  userId      String
  jdId        String
  status      String   // pending, approved, rejected
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?
  notes       String?  @db.Text
  
  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
  proofs         Proof[]
}

// Proof model
model Proof {
  id                     String   @id @default(cuid())
  verificationSubmissionId String
  type                   String   // skill, certification, behavior, other
  title                  String
  description            String?  @db.Text
  fileUrl                String?
  linkUrl                String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  verificationSubmission VerificationSubmission @relation(fields: [verificationSubmissionId], references: [id], onDelete: Cascade)
}

// Badge model
model Badge {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  jdId        String
  name        String
  description String?  @db.Text
  imageUrl    String?
  issuedAt    DateTime @default(now())
  expiresAt   DateTime?

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)
}

// Course model
model Course {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?  @db.Text
  price       Float?
  isFree      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company          Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  modules          Module[]
  jobDescriptions  CourseToJD[]
  enrollments      CourseEnrollment[]
}

// Module model
model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?  @db.Text
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

// Lesson model
model Lesson {
  id          String   @id @default(cuid())
  moduleId    String
  title       String
  content     String   @db.Text
  videoUrl    String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

// Course to Job Description relation
model CourseToJD {
  courseId String
  jdId     String

  // Relations
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  jobDescription JobDescription @relation(fields: [jdId], references: [id], onDelete: Cascade)

  @@id([courseId, jdId])
}

// Course Enrollment model
model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Float    @default(0) // 0-100%
  startedAt DateTime @default(now())
  completedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

// Store model
model Store {
  id        String   @id @default(cuid())
  userId    String
  name      String
  domain    String   @unique
  components Json?
  theme     Json?
  seo       Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Post model
model Post {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  likes     Int      @default(0)
  comments  Int      @default(0)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postLikes PostLike[]
}

// Post Like model
model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}